name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: stopfmich/steam-api-php

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'  
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, hash, json, pcre, zip

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4  
      with:
        path: vendor
        key: ${{ runner.os }}-php-8.3-${{ hashFiles('**/composer.json') }}  # composer.json statt .lock
        restore-keys: |
          ${{ runner.os }}-php-8.3-

    - name: Install dependencies
      run: |
        # composer.lock entfernen falls vorhanden (wie in Dockerfile)
        rm -f composer.lock
        composer install --prefer-dist --no-progress --optimize-autoloader

    - name: Create .env file
      run: cp .env.example .env

    - name: Create logs directory
      run: mkdir -p logs && chmod 755 logs

    - name: Run syntax check
      run: find src/ -name "*.php" -exec php -l {} \; 2>/dev/null || echo "No PHP files in src/ found"

    - name: Run basic tests
      run: |
        # Basis-Test dass composer.json valid ist
        composer validate --strict
        
        # Test dass .env.example existiert
        test -f .env.example || exit 1

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [production, development]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.target }}
          type=ref,event=pr,suffix=-${{ matrix.target }}
          type=semver,pattern={{version}},suffix=-${{ matrix.target }}
          type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.target }}
          type=raw,value=latest,suffix=-${{ matrix.target }},enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        # Build-Args for more efficient caching
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Test built image
      if: github.event_name != 'pull_request'
      run: |
        # Basic smoke test des gebauten Images
        docker run --rm -d --name test-container -p 8080:80 ${{ env.IMAGE_NAME }}:latest-${{ matrix.target }}
        sleep 10
        
        # Health check testen
        curl -f http://localhost:8080/api/v1/test || exit 1
        
        # Container stoppen
        docker stop test-container

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:latest-production'
        format: 'sarif'
        output: 'trivy-results.sarif'
        # less verbose output
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3  # ‚úÖ Aktualisiert auf v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # new job: Deployment Notification
  notify:
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Steam API Docker images successfully built and pushed!"
          echo "üê≥ Available images:"
          echo "  - ${{ env.IMAGE_NAME }}:latest-production"
          echo "  - ${{ env.IMAGE_NAME }}:latest-development"
        else
          echo "‚ùå Build failed - check logs above"
          exit 1
        fi